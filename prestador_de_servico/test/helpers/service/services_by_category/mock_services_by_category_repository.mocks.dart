// Mocks generated by Mockito 5.4.4 from annotations
// in prestador_de_servico/test/helpers/service/services_by_category/mock_services_by_category_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:prestador_de_servico/app/models/services_by_category/services_by_category.dart'
    as _i6;
import 'package:prestador_de_servico/app/repositories/service/services_by_category/services_by_category_repository.dart'
    as _i3;
import 'package:prestador_de_servico/app/shared/utils/either/either.dart'
    as _i2;
import 'package:prestador_de_servico/app/shared/utils/failure/failure.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ServicesByCategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockServicesByCategoryRepository extends _i1.Mock
    implements _i3.ServicesByCategoryRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ServicesByCategory>>> getAll() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.Failure, List<_i6.ServicesByCategory>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServicesByCategory>>(
          this,
          Invocation.method(
            #getAll,
            [],
          ),
        )),
        returnValueForMissingStub: _i4.Future<
                _i2.Either<_i5.Failure, List<_i6.ServicesByCategory>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServicesByCategory>>(
          this,
          Invocation.method(
            #getAll,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ServicesByCategory>>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, List<_i6.ServicesByCategory>>> getByContainedName(
          String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByContainedName,
          [name],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.Failure, List<_i6.ServicesByCategory>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServicesByCategory>>(
          this,
          Invocation.method(
            #getByContainedName,
            [name],
          ),
        )),
        returnValueForMissingStub: _i4.Future<
                _i2.Either<_i5.Failure, List<_i6.ServicesByCategory>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServicesByCategory>>(
          this,
          Invocation.method(
            #getByContainedName,
            [name],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ServicesByCategory>>>);
}
