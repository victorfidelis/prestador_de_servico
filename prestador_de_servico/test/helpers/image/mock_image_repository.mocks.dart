// Mocks generated by Mockito 5.4.4 from annotations
// in prestador_de_servico/test/helpers/image/mock_image_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:prestador_de_servico/app/repositories/image/image_repository.dart'
    as _i3;
import 'package:prestador_de_servico/app/shared/either/either.dart' as _i2;
import 'package:prestador_de_servico/app/shared/failure/failure.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ImageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageRepository extends _i1.Mock implements _i3.ImageRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> uploadImage({
    required String? imageFileName,
    required _i6.File? imageFile,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImage,
          [],
          {
            #imageFileName: imageFileName,
            #imageFile: imageFile,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #uploadImage,
            [],
            {
              #imageFileName: imageFileName,
              #imageFile: imageFile,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, String>>.value(
                _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #uploadImage,
            [],
            {
              #imageFileName: imageFileName,
              #imageFile: imageFile,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteImage(
          {required String? imageUrl}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteImage,
          [],
          {#imageUrl: imageUrl},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteImage,
            [],
            {#imageUrl: imageUrl},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteImage,
            [],
            {#imageUrl: imageUrl},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
