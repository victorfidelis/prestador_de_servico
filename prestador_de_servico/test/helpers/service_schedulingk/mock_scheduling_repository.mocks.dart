// Mocks generated by Mockito 5.4.4 from annotations
// in prestador_de_servico/test/helpers/service_schedulingk/mock_scheduling_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:prestador_de_servico/app/models/scheduled_service/scheduled_service.dart'
    as _i8;
import 'package:prestador_de_servico/app/models/scheduling_day/scheduling_day.dart'
    as _i7;
import 'package:prestador_de_servico/app/models/service_scheduling/service_scheduling.dart'
    as _i6;
import 'package:prestador_de_servico/app/repositories/scheduling/scheduling_repository.dart'
    as _i3;
import 'package:prestador_de_servico/app/shared/utils/either/either.dart'
    as _i2;
import 'package:prestador_de_servico/app/shared/utils/failure/failure.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SchedulingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSchedulingRepository extends _i1.Mock
    implements _i3.SchedulingRepository {
  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i6.ServiceScheduling>> getServiceScheduling(
          {required String? serviceSchedulingId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getServiceScheduling,
          [],
          {#serviceSchedulingId: serviceSchedulingId},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.ServiceScheduling>>.value(
                _FakeEither_0<_i5.Failure, _i6.ServiceScheduling>(
          this,
          Invocation.method(
            #getServiceScheduling,
            [],
            {#serviceSchedulingId: serviceSchedulingId},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.ServiceScheduling>>.value(
                _FakeEither_0<_i5.Failure, _i6.ServiceScheduling>(
          this,
          Invocation.method(
            #getServiceScheduling,
            [],
            {#serviceSchedulingId: serviceSchedulingId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ServiceScheduling>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>> getAllServicesByDay(
          {required DateTime? dateTime}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllServicesByDay,
          [],
          {#dateTime: dateTime},
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServiceScheduling>>(
          this,
          Invocation.method(
            #getAllServicesByDay,
            [],
            {#dateTime: dateTime},
          ),
        )),
        returnValueForMissingStub: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServiceScheduling>>(
          this,
          Invocation.method(
            #getAllServicesByDay,
            [],
            {#dateTime: dateTime},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>);

  @override
  _i4.Future<
      _i2
      .Either<_i5.Failure, List<_i6.ServiceScheduling>>> getAllServicesByUserId(
          {required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllServicesByUserId,
          [],
          {#userId: userId},
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServiceScheduling>>(
          this,
          Invocation.method(
            #getAllServicesByUserId,
            [],
            {#userId: userId},
          ),
        )),
        returnValueForMissingStub: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServiceScheduling>>(
          this,
          Invocation.method(
            #getAllServicesByUserId,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure,
          List<_i7.SchedulingDay>>> getDaysWithService() => (super.noSuchMethod(
        Invocation.method(
          #getDaysWithService,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i7.SchedulingDay>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.SchedulingDay>>(
          this,
          Invocation.method(
            #getDaysWithService,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i7.SchedulingDay>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.SchedulingDay>>(
          this,
          Invocation.method(
            #getDaysWithService,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.SchedulingDay>>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure,
          List<_i6.ServiceScheduling>>> getPendingProviderSchedules() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingProviderSchedules,
          [],
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServiceScheduling>>(
          this,
          Invocation.method(
            #getPendingProviderSchedules,
            [],
          ),
        )),
        returnValueForMissingStub: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServiceScheduling>>(
          this,
          Invocation.method(
            #getPendingProviderSchedules,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure,
          List<_i6.ServiceScheduling>>> getPendingPaymentSchedules() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingPaymentSchedules,
          [],
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServiceScheduling>>(
          this,
          Invocation.method(
            #getPendingPaymentSchedules,
            [],
          ),
        )),
        returnValueForMissingStub: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServiceScheduling>>(
          this,
          Invocation.method(
            #getPendingPaymentSchedules,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> editDateOfScheduling({
    required String? schedulingId,
    required DateTime? startDateAndTime,
    required DateTime? endDateAndTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editDateOfScheduling,
          [],
          {
            #schedulingId: schedulingId,
            #startDateAndTime: startDateAndTime,
            #endDateAndTime: endDateAndTime,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #editDateOfScheduling,
            [],
            {
              #schedulingId: schedulingId,
              #startDateAndTime: startDateAndTime,
              #endDateAndTime: endDateAndTime,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #editDateOfScheduling,
            [],
            {
              #schedulingId: schedulingId,
              #startDateAndTime: startDateAndTime,
              #endDateAndTime: endDateAndTime,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> editServicesAndPrices({
    required String? schedulingId,
    required double? totalRate,
    required double? totalDiscount,
    required double? totalPrice,
    required List<_i8.ScheduledService>? scheduledServices,
    required DateTime? newEndDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editServicesAndPrices,
          [],
          {
            #schedulingId: schedulingId,
            #totalRate: totalRate,
            #totalDiscount: totalDiscount,
            #totalPrice: totalPrice,
            #scheduledServices: scheduledServices,
            #newEndDate: newEndDate,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #editServicesAndPrices,
            [],
            {
              #schedulingId: schedulingId,
              #totalRate: totalRate,
              #totalDiscount: totalDiscount,
              #totalPrice: totalPrice,
              #scheduledServices: scheduledServices,
              #newEndDate: newEndDate,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #editServicesAndPrices,
            [],
            {
              #schedulingId: schedulingId,
              #totalRate: totalRate,
              #totalDiscount: totalDiscount,
              #totalPrice: totalPrice,
              #scheduledServices: scheduledServices,
              #newEndDate: newEndDate,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>> getConflicts({
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConflicts,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServiceScheduling>>(
          this,
          Invocation.method(
            #getConflicts,
            [],
            {
              #startDate: startDate,
              #endDate: endDate,
            },
          ),
        )),
        returnValueForMissingStub: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.ServiceScheduling>>(
          this,
          Invocation.method(
            #getConflicts,
            [],
            {
              #startDate: startDate,
              #endDate: endDate,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ServiceScheduling>>>);
}
